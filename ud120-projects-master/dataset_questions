#!/usr/bin/python

""" 
    Starter code for exploring the Enron dataset (emails + finances);
    loads up the dataset (pickled dict of dicts).

    The dataset has the form:
    enron_data["LASTNAME FIRSTNAME MIDDLEINITIAL"] = { features_dict }

    {features_dict} is a dictionary of features associated with that person.
    You should explore features_dict as part of the mini-project,
    but here's an example to get you started:

    enron_data["SKILLING JEFFREY K"]["bonus"] = 5600000
    
"""
#!/usr/bin/python

""" 
    Starter code for exploring the Enron dataset (emails + finances);
    loads up the dataset (pickled dict of dicts).

    The dataset has the form:
    enron_data["LASTNAME FIRSTNAME MIDDLEINITIAL"] = { features_dict }

    {features_dict} is a dictionary of features associated with that person.
    You should explore features_dict as part of the mini-project,
    but here's an example to get you started:

    enron_data["SKILLING JEFFREY K"]["bonus"] = 5600000
    
"""

import pickle
import numpy as np
import pandas as pd

enron_data = pickle.load(open("../final_project/final_project_dataset.pkl", "r"))

""" How many People? """
count = len(enron_data)
print count
# Result: 146

""" How many features? """
features = len(enron_data[enron_data.keys()[0]])  
print features
# Result 21

""" How many POIs are in the dataset? """
poi = 0
for key in enron_data:
    if enron_data[key]['poi'] == 1:
        poi =poi + 1
print poi
# Result 18

""" How many POIs were there total? """
# Load txt data with the defined POIs
poi_txt = open('../final_project/poi_names.txt').readlines()
pois = [txt.strip() for txt in poi_txt]
print len(pois) - 2
# Result 35

""" What is the total value of the stock belonging to James Prentice? """
jp_total_stock = enron_data["PRENTICE JAMES"]["total_stock_value"]
print jp_total_stock
# Result: 1095040

""" How many email messages do we have from Wesley Colwell to persons of 
interest? """
cw_mails = enron_data["COLWELL WESLEY"]["from_this_person_to_poi"]
print cw_mails
# Result: 11

""" What’s the value of stock options exercised by Jeffrey K Skilling? """
js_stock_options = enron_data["SKILLING JEFFREY K"]["exercised_stock_options"]
print js_stock_options
# Result: 19250000

""" How much money did that person get? """
js_total_payment = enron_data["SKILLING JEFFREY K"]["total_payments"]
print("Jeffrey Skilling: ", js_total_payment)
kl_total_payment = enron_data["LAY KENNETH L"]["total_payments"] #Kenneth Lay
print("Kenneth Lay: ", kl_total_payment)
af_total_payment = enron_data["FASTOW ANDREW S"]["total_payments"]
print("Andew Fastow: ", af_total_payment)
# Result:
#('Jeffrey Skilling: ', 8682716)
#('Kenneth Lay: ', 103559793)
#('Andew Fastow: ', 2424083)

""" How many folks in this dataset have a quantified salary? 
    What about a known email address? """
    
quantified_salary = 0
for key in enron_data:
    if enron_data[key]['salary'] != 'NaN':
        quantified_salary = quantified_salary + 1
print quantified_salary
# Result: 95; not: 51

known_email = 0
for key in enron_data:
    if enron_data[key]['email_address'] != 'NaN':
        known_email = known_email + 1
print known_email
# Result: 111; not: 35

""" How many people in the E+F dataset (as it currently exists) have “NaN” for 
    their total payments? What percentage of people in the dataset as a whole 
    is this? """
nan_total_payments = 0
for key in enron_data:
    if enron_data[key]['total_payments'] != 'NaN':
        nan_total_payments = nan_total_payments + 1
print nan_total_payments
print (len(enron_data)-nan_total_payments)/float(len(enron_data))
# Result: 14.4%

""" How many POIs in the E+F dataset have “NaN” for their total payments? 
    What percentage of POI’s as a whole is this? """
count_poi = 0
count_nan = 0
if enron_data[key]['poi'] == True:  
    count_poi += 1
    if enron_data[key]['total_payments'] == "NaN":
        count_nan += 1   
print count_nan / len(enron_data)
# Result: 0%

count_poi = 0
count_nan = 10
if enron_data[key]['poi'] == True:  
    count_poi += 1
    print count_poi
    if enron_data[key]['total_payments'] == "NaN":
        count_nan += 1 
        print count_nan



import pickle

enron_data = pickle.load(open("../final_project/final_project_dataset.pkl", "r"))

cnt_people = enron_data.count(["LASTNAME"])
print(cnt_people)
